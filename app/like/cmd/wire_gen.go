// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"harmoni/app/like/internal/conf"
	"harmoni/app/like/internal/repository/like"
	"harmoni/app/like/internal/server"
	"harmoni/app/like/internal/server/mq"
	like3 "harmoni/app/like/internal/service/like"
	like2 "harmoni/app/like/internal/usecase/like"
	"harmoni/app/like/internal/usecase/like/events"
	conf2 "harmoni/internal/conf"
	"harmoni/internal/pkg/data"
	"harmoni/internal/pkg/logger"
	"harmoni/internal/pkg/mq/publisher"
	server2 "harmoni/internal/pkg/server"
	"harmoni/internal/pkg/snowflakex"
	"harmoni/internal/repository"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(conf3 *conf.Conf, appConf *conf2.App, dataConf *conf2.DB, etcdConf *conf2.ETCD, serverConf *conf2.Server, logConf *conf2.Log, mqConf *conf2.MessageQueue) (*kratos.App, func(), error) {
	zapLogger, err := logger.NewZapLogger(logConf)
	if err != nil {
		return nil, nil, err
	}
	loggerLogger := logger.NewLogger(zapLogger)
	node, err := snowflakex.NewSnowflakeNode(appConf)
	if err != nil {
		return nil, nil, err
	}
	uniqueIDRepo := repository.NewUniqueIDRepo(node)
	db, cleanup, err := data.NewGormDB(dataConf, zapLogger)
	if err != nil {
		return nil, nil, err
	}
	dataDB := data.NewDB(db)
	likeRepo := like.NewLikeRepo(uniqueIDRepo, dataDB, loggerLogger)
	messagePublisher, err := mq.NewPublisher(mqConf, loggerLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	jsonPublisher := publisher.NewJSONPublisher(messagePublisher)
	likeUsecase := like2.NewLikeUsecase(likeRepo, jsonPublisher, loggerLogger)
	likeService := like3.NewLikeService(likeUsecase, loggerLogger)
	grpcServer := server.NewGRPCServer(serverConf, likeService, loggerLogger)
	likeEventsHandler := events.NewLikeEventsHandler(likeRepo, loggerLogger)
	router, err := mq.NewMQRouter(mqConf, likeEventsHandler, loggerLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	mqServer := server2.NewMQServer(router)
	app := newApp(loggerLogger, grpcServer, mqServer)
	return app, func() {
		cleanup()
	}, nil
}
